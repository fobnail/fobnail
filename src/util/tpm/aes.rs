use aes::{
    cipher::{AsyncStreamCipher, KeyIvInit},
    Aes128,
};
use cfb_mode::Encryptor;

type Aes128CfbEncrypt = Encryptor<Aes128>;

pub fn aes128_cfb_encrypt(key: &[u8], iv: &[u8], data: &[u8], out: &mut [u8]) {
    let encryptor = Aes128CfbEncrypt::new(key.into(), iv.into());
    encryptor.encrypt_b2b(data, out).unwrap();
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_aes_encrypt() {
        let key: [u8; 16] = [
            0xef, 0x3d, 0x11, 0xf, 0x85, 0x66, 0xdc, 0xfa, 0x40, 0x6f, 0x92, 0x24, 0x6e, 0xb6,
            0xe7, 0xda,
        ];
        let iv: [u8; 16] = [0; 16];
        let cv: [u8; 34] = [
            0x0, 0x20, 0xe2, 0x8c, 0x73, 0x38, 0xb3, 0xfa, 0x59, 0x1b, 0xb3, 0xff, 0xc, 0x5b, 0xf5,
            0x7e, 0xe9, 0x52, 0x99, 0x5d, 0x6, 0xe6, 0x81, 0x84, 0xa0, 0xd9, 0xe7, 0x5f, 0xa7,
            0x4d, 0x6c, 0x59, 0x37, 0x63,
        ];
        let expected_out: [u8; 34] = [
            0x32, 0x30, 0x84, 0x25, 0x41, 0x2a, 0x10, 0x60, 0x54, 0xae, 0xa0, 0x29, 0x6d, 0x64,
            0x08, 0x1c, 0xa1, 0x72, 0x74, 0x8d, 0x03, 0x89, 0xe8, 0xcb, 0x82, 0x78, 0xb7, 0x86,
            0x8a, 0x83, 0x8e, 0x05, 0x35, 0x22,
        ];

        let mut out = [0u8; 34];
        super::aes128_cfb_encrypt(&key, &iv, &cv, &mut out);
        assert_eq!(out, expected_out);
    }
}
